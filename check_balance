#!/usr/bin/python
#
# This Nagios/Icinga plugin checks the credit of prepaid-answer from SMStools3
#
# Author: Tobias Gall <tobias.gall@mailbox.org>
# Licence: MIT


import re
import argparse

parser = argparse.ArgumentParser(description='Prepaid balance check for Nagios')
parser.add_argument('--verbose', action='store_true', help='verbose flag')
parser.add_argument('-c', action='store', default=1.0, dest='critical', type=float, help='Critical value eg. 1.0')
parser.add_argument('-w', action='store', default=2.0, dest='warning', type=float, help='Warning value eg 2.0')
parser.add_argument('-s', action='store', default='/etc/smsd.conf', dest='smsconf',
                    help='SMSTools3 Config Path eg. /etc/smsd.conf')
parser.add_argument('-d', action='store', dest='device', help='Device eg. GSM1')
parser.add_argument('-currency', action='store', default='EUR', dest='currency', help='Currency eg. EUR')

args = parser.parse_args()

if args.verbose:
    print(args)

STATE_OK = 0
STATE_WARNING = 1
STATE_CRITICAL = 2
STATE_UNKNOWN = 3
STATE_DEPENDENT = 4

devices = []
stats_path = ''


def get_balance(device):
    try:
        balance_file = stats_path + '/' + device + '.balance'
        if args.verbose:
            print('Balance file: ' + balance_file)
        f = open(balance_file, 'r')
        status = [x.strip() for x in f.readline().split(',', 1)]
        f.close()
        date = status[0]
        if args.verbose:
            print('Date: ' + date)
        search = re.search('\d*[.]{1}\d{2} ' + args.currency, status[1]).span()
        balance = status[1][search[0]:search[1]]
        balance = balance.replace(args.currency, '').strip()
        return (float(balance), date)
    except Exception as e:
        print(e)
        exit(STATE_UNKNOWN)


try:
    f = open(args.smsconf, 'r')
    for line in f:
        if re.match('devices', line) and args.device is None:
            tmp = line.split('=')
            devices = [x.strip() for x in tmp[1].split(',')]
            if args.verbose:
                print('Devices: ' + ', '.join(devices))
        elif re.match('stats', line):
            tmp = line.split('=')
            stats_path = tmp[1].strip()
            if args.verbose:
                print('Stats path: ' + stats_path)
        else:
            continue
    f.close()
except Exception as e:
    print(e)
    exit(STATE_UNKNOWN)

if args.device is not None:
    balance, date = get_balance(args.device)
    if balance <= args.critical:
        print('Critical - Credit: ' + str(balance) + ' ' + args.currency + ' - Date: ' + date)
        exit(STATE_CRITICAL)
    elif balance <= args.warning:
        print('Warning - Credit: ' + str(balance) + ' ' + args.currency + ' - Date: ' + date)
        exit(STATE_WARNING)
    elif balance > args.warning:
        print('OK - Credit: ' + str(balance) + ' ' + args.currency + ' - Date: ' + date)
        exit(STATE_OK)
    else:
        print('Unknown - Credit: ' + str(balance) + ' ' + args.currency + ' - Date: ' + date)
        exit(STATE_UNKNOWN)
else:
    crit = False
    warn = False
    ok = False
    ret = ''
    for device in devices:
        ret += device + ': '
        balance = get_balance(device)
        if balance <= args.critical:
            ret += 'Critical - Credit: ' + str(balance) + ' ' + args.currency + ' - Date: ' + date
            crit = True
        elif balance <= args.warning:
            ret += 'Warning - Credit: ' + str(balance) + ' ' + args.currency + ' - Date: ' + date
            warn = True
        elif balance > args.warning:
            ret += 'OK - Credit: ' + str(balance) + ' ' + args.currency + ' - Date: ' + date
            ok = True
        else:
            ret += 'Unknown - Credit: ' + str(balance) + ' ' + args.currency + ' - Date: ' + date
        ret += ' '
    print(ret)
    if crit:
        exit(STATE_CRITICAL)
    elif warn:
        exit(STATE_WARNING)
    elif ok:
        exit(STATE_OK)
    else:
        exit(STATE_UNKNOWN)